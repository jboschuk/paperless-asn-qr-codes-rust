# This workflow builds a Rust CLI tool for Linux and Windows,
# and then attaches the compiled binaries to a GitHub Release.

name: Release

# This workflow will run whenever a new release is published.
on:
  release:
    types: [published]

jobs:
  # Job for building the Linux binary
  build-linux:
    name: Build for Linux (x86_64)
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install the Rust toolchain
      # This action sets up Rust and Cargo, and can install specific toolchains.
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x86_64-unknown-linux-gnu # Specify the target for Linux

      # Step 3: Build the Rust project in release mode
      # The --release flag optimizes the build for performance and reduces binary size.
      # The --target flag ensures the build is for the specified architecture.
      - name: Build Rust CLI for Linux
        run: cargo build --release --target x86_64-unknown-linux-gnu

      # Step 4: Compress the Linux executable into a tar.gz archive
      - name: Compress Linux executable
        run: |
          # Change directory to the release folder to ensure the archive structure is clean.
          # Then create a gzipped tar archive of the executable.
          cd target/x86_64-unknown-linux-gnu/release
          tar -czvf ../../../paperless-asn-qr-codes-linux-x64.tar.gz paperless-asn-qr-codes
          # The path '../../../paperless-asn-qr-codes-linux-x64.tar.gz' places the archive
          # in the root of the workspace for easier artifact upload.

      # Step 5: Upload the compressed binary as an artifact
      # This makes the binary available to subsequent jobs in the workflow,
      # or for download directly from the workflow run summary.
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: paperless-asn-qr-codes-linux-x64 # Name of the artifact
          path: paperless-asn-qr-codes-linux-x64.tar.gz # Path to the compressed executable

  # Job for building the Windows binary
  build-windows:
    name: Build for Windows (x86_64)
    runs-on: windows-latest # Use the latest Windows runner

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install the Rust toolchain
      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          target: x86_64-pc-windows-msvc # Specify the target for Windows (MSVC toolchain)

      # Step 3: Build the Rust project in release mode
      - name: Build Rust CLI for Windows
        run: cargo build --release --target x86_64-pc-windows-msvc

      # Step 4: Compress the Windows executable into a zip archive
      - name: Compress Windows executable
        run: |
          # Use PowerShell's Compress-Archive cmdlet to create a zip file.
          Compress-Archive -Path target\x86_64-pc-windows-msvc\release\paperless-asn-qr-codes.exe -DestinationPath paperless-asn-qr-codes-windows-x64.zip

      # Step 5: Upload the compressed binary as an artifact
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: paperless-asn-qr-codes-windows-x64 # Name of the artifact
          path: paperless-asn-qr-codes-windows-x64.zip # Path to the compressed executable

  # Job for creating and uploading release assets
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest # Run on Ubuntu
    needs: [build-linux, build-windows] # This job depends on both build jobs completing successfully

    steps:
      # Step 1: Download the artifacts generated by the build jobs
      # This step retrieves the compressed binaries from the previous jobs.
      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: paperless-asn-qr-codes-linux-x64 # Must match the name used in upload-artifact

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: paperless-asn-qr-codes-windows-x64 # Must match the name used in upload-artifact

      # Step 2: Upload the downloaded artifacts to the GitHub Release
      # This action automatically detects the release triggered by 'on: release'
      # and uploads the specified files as assets.
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            paperless-asn-qr-codes-linux-x64/paperless-asn-qr-codes-linux-x64.tar.gz # Path to the downloaded Linux compressed executable
            paperless-asn-qr-codes-windows-x64/paperless-asn-qr-codes-windows-x64.zip # Path to the downloaded Windows compressed executable
          # The 'files' input specifies which files to upload.
          # The paths here refer to the downloaded artifacts in the current job's workspace.
